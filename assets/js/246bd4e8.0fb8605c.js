"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65134],{93372:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=i(74848),t=i(28453);const r={sidebar_label:"reasoning_agent",title:"agentchat.contrib.reasoning_agent"},d=void 0,o={id:"reference/agentchat/contrib/reasoning_agent",title:"agentchat.contrib.reasoning_agent",description:"ThinkNode",source:"@site/docs/reference/agentchat/contrib/reasoning_agent.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/reasoning_agent",permalink:"/ag2/docs/reference/agentchat/contrib/reasoning_agent",draft:!1,unlisted:!1,editUrl:"https://github.com/ag2ai/ag2/edit/main/website/docs/reference/agentchat/contrib/reasoning_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"reasoning_agent",title:"agentchat.contrib.reasoning_agent"},sidebar:"referenceSideBar",previous:{title:"qdrant_retrieve_user_proxy_agent",permalink:"/ag2/docs/reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent"},next:{title:"retrieve_assistant_agent",permalink:"/ag2/docs/reference/agentchat/contrib/retrieve_assistant_agent"}},c={},l=[{value:"ThinkNode",id:"thinknode",level:2},{value:"__init__",id:"__init__",level:3},{value:"trajectory",id:"trajectory",level:3},{value:"to_dict",id:"to_dict",level:3},{value:"from_dict",id:"from_dict",level:3},{value:"visualize_tree",id:"visualize_tree",level:3},{value:"ReasoningAgent",id:"reasoningagent",level:2},{value:"__init__",id:"__init__-1",level:3},{value:"rate_node",id:"rate_node",level:3},{value:"generate_response",id:"generate_response",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"thinknode",children:"ThinkNode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ThinkNode()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"__init__",children:"__init__"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def __init__(content: str, parent: Optional["ThinkNode"] = None) -> None\n'})}),"\n",(0,s.jsx)(n.p,{children:"A node in a tree structure representing a step in the reasoning process."}),"\n",(0,s.jsx)(n.p,{children:"This class implements a tree node that stores content (text describing a reasoning step),\nmaintains parent-child relationships, tracks node statistics, and provides utilities\nfor traversing/visualizing the reasoning path."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"content"})," ",(0,s.jsx)(n.em,{children:"str"})," - The text content/description for this reasoning step"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parent"})," ",(0,s.jsx)(n.em,{children:"Optional[ThinkNode]"})," - The parent node in the tree, if any"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"content"})," ",(0,s.jsx)(n.em,{children:"str"})," - The text content/description for this reasoning step"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"value"})," ",(0,s.jsx)(n.em,{children:"Optional[float]"})," - A numeric score/value assigned to this node"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"parent"})," ",(0,s.jsx)(n.em,{children:"Optional[ThinkNode]"})," - Reference to parent node"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"depth"})," ",(0,s.jsx)(n.em,{children:"int"})," - The depth of this node in the tree (root = 0)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"children"})," ",(0,s.jsx)(n.em,{children:"List[ThinkNode]"})," - List of child nodes"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"visits"})," ",(0,s.jsx)(n.em,{children:"int"})," - Number of times this node has been visited during search"]}),"\n",(0,s.jsx)(n.p,{children:"The node automatically maintains the tree structure by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Setting its depth based on parent's depth + 1"}),"\n",(0,s.jsx)(n.li,{children:"Adding itself to parent's children list if parent exists"}),"\n",(0,s.jsx)(n.li,{children:"Providing trajectory utilities to get the full path from root to this node"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"trajectory",children:"trajectory"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@property\ndef trajectory() -> str\n"})}),"\n",(0,s.jsx)(n.p,{children:"Get a formatted string representation of the path from root to this node."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"str"})," - A formatted string showing the question and each step in the reasoning process"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"to_dict",children:"to_dict"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def to_dict() -> Dict\n"})}),"\n",(0,s.jsx)(n.p,{children:"Convert ThinkNode to dictionary representation."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Dict"})," - Dictionary containing all node attributes and recursive children"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"from_dict",children:"from_dict"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@classmethod\ndef from_dict(cls,\n              data: Dict,\n              parent: Optional["ThinkNode"] = None) -> "ThinkNode"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Create ThinkNode from dictionary representation."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," ",(0,s.jsx)(n.em,{children:"Dict"})," - Dictionary containing node data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parent"})," ",(0,s.jsx)(n.em,{children:"Optional[ThinkNode]"})," - Parent node to attach to"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ThinkNode"})," - Reconstructed node with all children"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"visualize_tree",children:"visualize_tree"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def visualize_tree(root: ThinkNode) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Visualize the tree of thoughts using graphviz."}),"\n",(0,s.jsx)(n.h2,{id:"reasoningagent",children:"ReasoningAgent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ReasoningAgent(AssistantAgent)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"__init__-1",children:"__init__"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def __init__(name,\n             llm_config,\n             max_depth=4,\n             beam_size=3,\n             answer_approach="pool",\n             verbose=True,\n             **kwargs) -> None\n'})}),"\n",(0,s.jsx)(n.p,{children:"Initialize a ReasoningAgent that uses tree-of-thought reasoning.,"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," - Name of the agent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"llm_config"})," - Configuration for the language model"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_depth"})," ",(0,s.jsx)(n.em,{children:"int"})," - Maximum depth of the reasoning tree"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"beam_size"})," ",(0,s.jsx)(n.em,{children:"int"})," - Number of parallel reasoning paths to maintain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"answer_approach"})," ",(0,s.jsx)(n.em,{children:"str"}),' - Either "pool" or "best" - how to generate final answer']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"verbose"})," ",(0,s.jsx)(n.em,{children:"bool"})," - Whether to show intermediate steps"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rate_node",children:"rate_node"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def rate_node(node: ThinkNode) -> float\n"})}),"\n",(0,s.jsx)(n.p,{children:"Rate the quality of a reasoning path using the grader agent."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"node"})," ",(0,s.jsx)(n.em,{children:"ThinkNode"})," - Node containing the reasoning trajectory to evaluate"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float"})," - Normalized score between 0 and 1 indicating trajectory quality"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"generate_response",children:"generate_response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def generate_response(messages, sender, config=None)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generate a response using tree-of-thought reasoning."}),"\n",(0,s.jsx)(n.p,{children:"Implements beam search through a tree of reasoning steps, using the thinker\nagent to generate possible next steps and the grader agent to evaluate paths."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"messages"})," - Input messages to respond to"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sender"})," - Agent sending the messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"config"})," - Optional configuration"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"Tuple[bool, str]: Success flag and generated response"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);