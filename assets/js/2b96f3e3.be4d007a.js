"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[20431],{95730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var a=t(74848),r=t(28453);const i={title:"Knowledgeable Agents with FalkorDB Graph RAG",authors:["marklysze","sternakt","davorrunje","AgentGenie","qingyunwu"],tags:["RAG","Graph RAG","Structured Outputs","swarm","nested chat"]},s=void 0,o={permalink:"/ag2/blog/2024/12/06/FalkorDB-Structured",source:"@site/blog/2024-12-06-FalkorDB-Structured/index.mdx",title:"Knowledgeable Agents with FalkorDB Graph RAG",description:"FalkorDB Web",date:"2024-12-06T00:00:00.000Z",formattedDate:"December 6, 2024",tags:[{label:"RAG",permalink:"/ag2/blog/tags/rag"},{label:"Graph RAG",permalink:"/ag2/blog/tags/graph-rag"},{label:"Structured Outputs",permalink:"/ag2/blog/tags/structured-outputs"},{label:"swarm",permalink:"/ag2/blog/tags/swarm"},{label:"nested chat",permalink:"/ag2/blog/tags/nested-chat"}],readingTime:5.32,hasTruncateMarker:!1,authors:[{name:"Mark Sze",title:"Software Engineer at AG2.ai",url:"https://github.com/marklysze",imageURL:"https://github.com/marklysze.png",key:"marklysze"},{name:"Tvrtko Sternak",title:"Machine Learning Engineer at Airt",url:"https://github.com/sternakt",imageURL:"https://github.com/sternakt.png",key:"sternakt"},{name:"Davor Runje",title:"CTO at Airt",url:"https://github.com/davorrunje",imageURL:"https://github.com/davorrunje.png",key:"davorrunje"},{name:"AgentGenie",title:"AG2 Contributor",url:"https://github.com/AgentGenie",imageURL:"https://github.com/AgentGenie.png",key:"AgentGenie"},{name:"Qingyun Wu",title:"Co-Founder of AutoGen/AG2 & FLAML, Assistant Professor at Penn State University",url:"https://qingyun-wu.github.io/",imageURL:"https://github.com/qingyun-wu.png",key:"qingyunwu"}],frontMatter:{title:"Knowledgeable Agents with FalkorDB Graph RAG",authors:["marklysze","sternakt","davorrunje","AgentGenie","qingyunwu"],tags:["RAG","Graph RAG","Structured Outputs","swarm","nested chat"]},unlisted:!1,nextItem:{title:"ReasoningAgent - Tree of Thoughts with Beam Search in AG2",permalink:"/ag2/blog/2024/12/02/ReasoningAgent2"}},l={authorsImageUrls:[void 0,void 0,void 0,void 0,void 0]},h=[{value:"FalkorDB Graph RAG",id:"falkordb-graph-rag",level:2},{value:"Advantages of Graph RAG:",id:"advantages-of-graph-rag",level:3},{value:"FalkorDB Graph RAG capabilities",id:"falkordb-graph-rag-capabilities",level:3},{value:"Structured Outputs",id:"structured-outputs",level:2},{value:"Nested Chats in Swarms",id:"nested-chats-in-swarms",level:2},{value:"For Further Reading",id:"for-further-reading",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"FalkorDB Web",src:t(78850).A+"",width:"3833",height:"2094"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"TL;DR:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"We introduce a new ability for AG2 agents, Graph RAG with FalkorDB, providing the power of knowledge graphs"}),"\n",(0,a.jsx)(n.li,{children:"Structured outputs, using OpenAI models, provide strict adherence to data models to improve reliability and agentic flows"}),"\n",(0,a.jsx)(n.li,{children:"Nested chats are now available with a Swarm"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"falkordb-graph-rag",children:"FalkorDB Graph RAG"}),"\n",(0,a.jsx)(n.p,{children:"Typically, RAG uses vector databases, which store information as embeddings, mathematical representations of data points. When a query is received, it's also converted into an embedding, and the vector database retrieves the most similar embeddings based on distance metrics."}),"\n",(0,a.jsx)(n.p,{children:"Graph-based RAG, on the other hand, leverages graph databases, which represent knowledge as a network of interconnected entities and relationships. When a query is received, Graph RAG traverses the graph to find relevant information based on the query's structure and semantics."}),"\n",(0,a.jsx)(n.h3,{id:"advantages-of-graph-rag",children:"Advantages of Graph RAG:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Enhanced Contextual Understanding\nGraph RAG captures the relationships between entities in the knowledge graph, providing richer context for LLMs. This enables more accurate and nuanced responses compared to traditional RAG, which often retrieves isolated facts."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Improved Reasoning Abilities\nThe interconnected nature of graph databases allows Graph RAG to perform reasoning and inference over the knowledge. This is crucial for tasks requiring complex understanding and logical deductions, such as question answering and knowledge discovery."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Handling Complex Relationships\nGraph RAG excels at representing and leveraging intricate relationships between entities, allowing it to tackle complex queries that involve multiple entities and their connections. This makes it suitable for domains with rich interconnected data, like healthcare or finance."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Explainable Retrieval\nThe graph traversal process in Graph RAG provides a clear path for understanding why specific information was retrieved. This transparency is valuable for visualizing, debugging and building trust in the system's outputs."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"falkordb-graph-rag-capabilities",children:"FalkorDB Graph RAG capabilities"}),"\n",(0,a.jsx)(n.p,{children:"FalkorDB is a high performant graph database enabling queries with reduced hallucinations."}),"\n",(0,a.jsx)(n.p,{children:"In release 0.5, AG2 has added the ability to add FalkorDB Graph RAG querying capabilities to an agent. These agents will behave like other agents in an orchestration but will query the FalkorDB and return the results as a response."}),"\n",(0,a.jsx)(n.p,{children:"An LLM is incorporated into this capability, allowing data to be classified during ingestion, queries to be optimised, and results to be provided back in natural language."}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"https://docs.falkordb.com/",children:"FalkorDB docs"})," for how to get a database setup."]}),"\n",(0,a.jsxs)(n.p,{children:["Below is a simple example of creating a FalkorDB Graph RAG agent in AG2. A data file of web page on the movie The Matrix is ingested into the database and the knowledge graph is created automatically before being queried. ",(0,a.jsx)(n.a,{href:"https://raw.githubusercontent.com/ag2ai/ag2/refs/heads/main/test/agentchat/contrib/graph_rag/the_matrix.txt",children:"Data file here"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"For example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import os\nimport autogen\n\nconfig_list = autogen.config_list_from_json(env_or_file="OAI_CONFIG_LIST")\nos.environ["OPENAI_API_KEY"] = config_list[0]["api_key"] # Utilised by the FalkorGraphQueryEngine\n\nfrom autogen import ConversableAgent, UserProxyAgent\nfrom autogen.agentchat.contrib.graph_rag.document import Document, DocumentType\nfrom autogen.agentchat.contrib.graph_rag.falkor_graph_query_engine import FalkorGraphQueryEngine\nfrom autogen.agentchat.contrib.graph_rag.falkor_graph_rag_capability import FalkorGraphRagCapability\n\n# Auto generate graph schema from unstructured data\ninput_path = "../test/agentchat/contrib/graph_rag/the_matrix.txt"\ninput_documents = [Document(doctype=DocumentType.TEXT, path_or_url=input_path)]\n\n# Create FalkorGraphQueryEngine\nquery_engine = FalkorGraphQueryEngine(\n    name="The_Matrix_Auto",\n    host="172.18.0.3",  # Change\n    port=6379,          # if needed\n)\n\n# Ingest data and initialize the database\nquery_engine.init_db(input_doc=input_documents)\n\n# Create a ConversableAgent\ngraph_rag_agent = ConversableAgent(\n    name="matrix_agent",\n    human_input_mode="NEVER",\n)\n\n# Associate the capability with the agent\ngraph_rag_capability = FalkorGraphRagCapability(query_engine)\ngraph_rag_capability.add_to_agent(graph_rag_agent)\n\n# Create a user proxy agent to converse with our RAG agent\nuser_proxy = UserProxyAgent(\n    name="user_proxy",\n    human_input_mode="ALWAYS",\n)\n\nuser_proxy.initiate_chat(\n    graph_rag_agent,\n    message="Name a few actors who\'ve played in \'The Matrix\'")\n'})}),"\n",(0,a.jsx)(n.p,{children:"Here's the output showing the FalkorDB Graph RAG agent, matrix_agent, finding relevant actors and then being able to confirm that there are no other actors in the movie, when queried."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"user_proxy (to matrix_agent):\n\nName a few actors who've played in 'The Matrix'\n\n--------------------------------------------------------------------------------\nmatrix_agent (to user_proxy):\n\nKeanu Reeves, Laurence Fishburne, Carrie-Anne Moss, and Hugo Weaving are a few actors who've played in 'The Matrix'.\n\n--------------------------------------------------------------------------------\nuser_proxy (to matrix_agent):\n\nWho else acted in The Matrix?\n\n--------------------------------------------------------------------------------\nmatrix_agent (to user_proxy):\n\nBased on the provided information, there is no additional data about other actors who acted in 'The Matrix' outside of Keanu Reeves, Laurence Fishburne, Carrie-Anne Moss, and Hugo Weaving.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For a more in-depth example, ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/notebooks/agentchat_swarm_graphrag_trip_planner/",children:"see this notebook"})," where we create this Trip Planner workflow.\n",(0,a.jsx)(n.img,{alt:"Trip Planner",src:t(19532).A+"",width:"2738",height:"1556"})]}),"\n",(0,a.jsx)(n.h2,{id:"structured-outputs",children:"Structured Outputs"}),"\n",(0,a.jsx)(n.p,{children:"Also featured in the Trip Planner example above, AG2 now enables your agents to respond with a structured output, aligned with a Pydantic model."}),"\n",(0,a.jsx)(n.p,{children:"This capability provides strict responses, where the LLM provides the data in a structure that you define. This enables you to interpret and validate information precisely, providing more robustness to an LLM-based workflow."}),"\n",(0,a.jsx)(n.p,{children:"This is available when using OpenAI LLMs and is set in the LLM configuration (gpt-3.5-turbo-0613 or gpt-4-0613 and above):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel\n\n# Here is our model\nclass Step(BaseModel):\n    explanation: str\n    output: str\n\nclass MathReasoning(BaseModel):\n    steps: list[Step]\n    final_answer: str\n\n# response_format is added to our configuration\nllm_config = {\n    "config_list":\n    [\n        {\n            "api_type": "openai",\n            "model": "gpt-4o-mini",\n            "api_key": os.getenv("OPENAI_API_KEY"),\n            "response_format": MathReasoning\n        }\n    ]\n}\n\n# This agent\'s responses will now be based on the MathReasoning model\nassistant = autogen.AssistantAgent(\n    name="Math_solver",\n    llm_config=llm_config,\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["A sample response to ",(0,a.jsx)(n.code,{children:"how can I solve 8x + 7 = -23"})," would be:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'{\n   "steps": [\n       {\n           "explanation": "To isolate the term with x, we first subtract 7 from both sides of the equation.",\n           "output": "8x + 7 - 7 = -23 - 7 -> 8x = -30."\n       },\n       {\n           "explanation": "Now that we have 8x = -30, we divide both sides by 8 to solve for x.",\n           "output": "x = -30 / 8 -> x = -3.75."\n       }\n   ],\n   "final_answer": "x = -3.75"\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/notebooks/agentchat_swarm_graphrag_trip_planner/",children:"Trip Planner"})," and ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/notebooks/agentchat_structured_outputs/",children:"Structured Output"})," notebooks to start using Structured Outputs."]}),"\n",(0,a.jsx)(n.h2,{id:"nested-chats-in-swarms",children:"Nested Chats in Swarms"}),"\n",(0,a.jsx)(n.p,{children:"Building on the capability of Swarms, AG2 now allows you to utilise a nested chat within a swarm. By providing this capability, you can perform sub-tasks or solve more complex tasks, while maintaining a simple swarm setup."}),"\n",(0,a.jsx)(n.p,{children:"Additionally, adding a carry over configurations allow you to control what information from the swarm messages is carried over to the nested chat. Options include bringing over context from all messages, the last message, an LLM summary of the messages, or based on a own custom function."}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"https://ag2ai.github.io/ag2/docs/topics/swarm#registering-handoffs-to-a-nested-chat",children:"Swarm documentation"})," for more information."]}),"\n",(0,a.jsx)(n.h2,{id:"for-further-reading",children:"For Further Reading"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.falkordb.com/",children:"Documentation about FalkorDB"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/ag2ai/ag2/blob/main/notebook/agentchat_swarm_graphrag_trip_planner.ipynb",children:"FalkorDB example notebook"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/structured-outputs",children:"OpenAI's Structured Outputs"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Do you have interesting use cases for FalkorDB / RAG? Would you like to see more features or improvements? Please join our ",(0,a.jsx)(n.a,{href:"https://discord.com/invite/pAbnFJrkgZ",children:"Discord"})," server for discussion."]})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},78850:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/falkordb-31400e57ab51a28470ec4073d047d0fe.png"},19532:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/tripplanner-802946aa99135775e65128b9380c49a7.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);